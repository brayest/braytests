AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Cluster"

Parameters:
  Environment:
    Type: String
  ClusterName:
    Type: String
  DesiredCapacity:
    Type: String
    Default: 3
  ClusterType:
    Description: ECS Cluster Type to launch services
    Type: String
    AllowedValues:
      - EC2(OnDemand)
      - EC2(Spot)
      - Fargate
  AllocationStrategy:
    Type: String
    Description: "Allocation Strategy"
    Default: "lowestPrice"
    AllowedValues:
      - "lowestPrice"
      - "diversified"
  IAMCreate:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  IAMEcs:
    Type: String
    Default: arn:aws:iam::123456789:EcsRoleExample
  IAMSpot:
    Type: String
    Default: arn:aws:iam::123456789:SpotRoleExample
  IAMSpotScalableTarget:
    Type: String
    Default: arn:aws:iam::123456789:ScalableRoleExample
  DataDogApiKey:
    Type: String
    Description: "EFS File System ID"
    Default: ""
  DataDogLogging:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  EfsFileSystemId:
    Type: String
    Description: "EFS File System ID"
    Default: ""
  EfsMountPoint:
    Type: String
    Description: "EFS Mount Point"
    Default: "/mnt/efs"
  InstanceType:
    Description: Intance type using in the cluster
    Type: String
    Default: t2.medium
  KeyPair:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  MaxBatchSize:
    Type: String
    Default: 1
  MaxSize:
    Type: String
    Default: 5
  MinInstancesInService:
    Type: String
    Default: 3
  MinSize:
    Type: String
    Default: 1
  PauseTime:
    Type: String
    Default: PT5M
  SubnetIds:
    Type: CommaDelimitedList
  VpcId:
    Type: String

Mappings:
  AWSRegionToAMI:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    us-east-2:
      AMI: ami-ef64528a
    us-east-1:
      AMI: ami-cb17d8b6
    us-west-2:
      AMI: ami-baa236c2
    us-west-1:
      AMI: ami-29b8b249
    eu-west-3:
      AMI: ami-0356e07e
    eu-west-2:
      AMI: ami-25f51242
    eu-west-1:
      AMI: ami-64c4871d
    eu-central-1:
      AMI: ami-3b7d1354
    ap-northeast-2:
      AMI: ami-3b19b455
    ap-northeast-1:
      AMI: ami-bb5f13dd
    ap-southeast-2:
      AMI: ami-a677b6c4
    ap-southeast-1:
      AMI: ami-f88ade84
    ca-central-1:
      AMI: ami-db48cfbf
    ap-south-1:
      AMI: ami-9e91cff1
    sa-east-1:
      AMI: ami-da2c66b6

Outputs:
  EcsCluster:
    Value: !Ref EcsCluster
  SecurityGroup:
    Value: !Ref SecurityGroup

Conditions:
  IsEC2Spot: !Equals [ !Ref ClusterType, EC2(Spot) ]
  IsEC2OnDemand: !Equals [ !Ref ClusterType, EC2(OnDemand) ]
  IsEC2: !Or [Condition: IsEC2Spot, Condition: IsEC2OnDemand]
  IAMRole: !Equals [ !Ref IAMCreate, true ]
  IAMEC2: !And [Condition: IsEC2, Condition: IAMRole]
  IAMSpot: !And [Condition: IsEC2Spot, Condition: IAMRole]

Resources:
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: IsEC2OnDemand
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref MinInstancesInService
        MaxBatchSize: !Ref MaxBatchSize
        PauseTime: !Ref PauseTime
        WaitOnResourceSignals: false
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsLaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TerminationPolicies:
        - Default
      Tags:
        - Key: Name
          Value: !Ref ClusterName
          PropagateAtLaunch: true

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: IsEC2
    Properties:
      Path: /
      Roles:
        - !If
          - IAMRole
          - !Ref EcsRole
          - !Ref IAMEcs

  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: IsEC2OnDemand
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EcsInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdcy"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          echo ECS_CONTAINER_STOP_TIMEOUT=90s >> /etc/ecs/ecs.config
          echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=2h >> /etc/ecs/ecs.config
          echo ECS_LOGLEVEL=info >> /etc/ecs/ecs.config

          yum install -y python-pip
          pip-2.6 install awscli
          yum install -y aws-cfn-bootstrap
          yum install -y git

          if [ "${DataDogApiKey}" != "" ]; then
          DD_API_KEY=${DataDogApiKey} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
          usermod -a -G docker dd-agent
          cat <<EOF > /etc/datadog-agent/conf.d/docker.d/conf.yaml
          init_config:
          instances:
            - url: "unix://var/run/docker.sock"
              new_tag_names: true
          EOF
          echo "hostname: ${ClusterName}-$(curl http://169.254.169.254/latest/meta-data/instance-id)" >> /etc/datadog-agent/datadog.yaml
          echo "tags: ${ClusterName}" >> /etc/datadog-agent/datadog.yaml
          restart datadog-agent
          fi

          if [ "${EfsFileSystemId}" != "" ]; then
          mkdir -p ${EfsMountPoint}
          chown ec2-user:ec2-user ${EfsMountPoint}
          echo "${EfsFileSystemId}.efs.${AWS::Region}.amazonaws.com:/ ${EfsMountPoint} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
          mount -a -t nfs4
          fi

          if [ "${DataDogLogging}" = "true" ]; then
          cat <<EOF >> /etc/datadog-agent/conf.d/docker.d/conf.yaml
          logs:
            - type: docker
              service: docker
          EOF
          restart datadog-agent
          fi

          vgextend docker /dev/xvdcy
          lvextend -L+100G /dev/docker/docker-pool
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
          /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  EcsRole:
    Type: AWS::IAM::Role
    Condition: IAMEC2
    Properties:
      Path: /
      RoleName: !Sub ${ClusterName}-EcsRole-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:UpdateContainerInstancesState",
                    "ecs:Submit*",
                    "ecr:*",
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "s3:CopyObject",
                    "s3:GetObject",
                    "s3:ListObjects",
                    "s3:PutObject",
                    "sns:Publish",
                    "cloudformation:*"
                  ],
                  "Resource": "*"
              }]
            }
  RolePolicies:
    Type: AWS::IAM::Policy
    Condition: IsEC2
    Properties:
      PolicyName: S3Download
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      Roles:
        - !If
          - IAMRole
          - !Ref EcsRole
          - !Ref IAMEcs

  SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow tcp to client host
        VpcId: !Ref VpcId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
        Tags:
          - Key: Name
            Value: !Sub ${ClusterName}-LB

  ScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsEC2OnDemand
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleDownPolicy
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 3
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 50
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: IsEC2OnDemand
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: "0"
          ScalingAdjustment: "-1"

  ScaleUpMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsEC2OnDemand
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleUpPolicyOnDemand
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 70
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleUpPolicyOnDemand:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: IsEC2OnDemand
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 15
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 15
          ScalingAdjustment: 2

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: IsEC2Spot
    Properties:
      MaxCapacity: !Ref MaxSize
      MinCapacity: !Ref MinSize
      ResourceId: !Sub "spot-fleet-request/${SpotFleet}"
      RoleARN: !If
        - IAMRole
        - !GetAtt ScalableTargetRole.Arn
        - !Ref IAMSpotScalableTarget
      ScalableDimension: ec2:spot-fleet-request:TargetCapacity
      ServiceNamespace: ec2

  ScalableTargetRole:
    Type: AWS::IAM::Role
    Condition: IAMSpot
    Properties:
      Path: /
      RoleName: !Sub "${ClusterName}-scalable-target-${AWS::Region}"
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "spotfleet.amazonaws.com"
              }
            }
          ]
        }
      Policies:
        - PolicyName: !Sub "${ClusterName}-scalable-target-${AWS::Region}"
          PolicyDocument: |
            {
              "Statement": [
                {
                  "Action": [
                    "ec2:*"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }

  ScaleUpCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsEC2Spot
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleUpPolicySpot
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 3
      MetricName: CPUUtilization
      Namespace: AWS/EC2Spot
      Period: 60
      Statistic: Average
      Threshold: 50
      Unit: Percent
      Dimensions:
        - Name: FleetRequestId
          Value: !Ref SpotFleet

  ScaleUpPolicySpot:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: IsEC2Spot
    Properties:
      PolicyName: !Sub "${ClusterName}-scale-up-${AWS::Region}"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            ScalingAdjustment: 2

  SnsTopic:
    Type: AWS::SNS::Topic
    Condition: IsEC2Spot

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Condition: IsEC2Spot
    DependsOn:
      - EcsInstanceProfile
      - SecurityGroup
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: !Ref AllocationStrategy
        IamFleetRole: !If
          - IAMRole
          - !GetAtt SpotFleetRole.Arn
          - !Ref IAMSpot
        TargetCapacity: !Ref DesiredCapacity
        TerminateInstancesWithExpiration: true
        LaunchSpecifications:
          - IamInstanceProfile:
              Arn: !GetAtt EcsInstanceProfile.Arn
            BlockDeviceMappings:
              - DeviceName: "/dev/xvda"
                Ebs:
                  VolumeSize: "50"
                  VolumeType: "gp2"
              - DeviceName: "/dev/xvdcy"
                Ebs:
                  VolumeSize: "50"
                  VolumeType: "gp2"
            ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            KeyName:  !Ref KeyPair
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !Ref SecurityGroup
            SubnetId: !Join [",", !Ref SubnetIds]
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash
                  echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
                  echo ECS_CONTAINER_STOP_TIMEOUT=90s >> /etc/ecs/ecs.config

                  vgextend docker /dev/xvdcy
                  lvextend -L+100G /dev/docker/docker-pool

                  cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf
                  description "Start spot instance termination handler monitoring script"
                  author "Amazon Web Services"
                  start on started ecs
                  script
                  echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid
                  exec /usr/local/bin/spot-instance-termination-notice-handler.sh
                  end script
                  pre-start script
                  logger "[spot-instance-termination-notice-handler.sh]: spot instance termination notice handler started"
                  end script
                  EOF
                  if [ "${DataDogApiKey}" != "" ]; then
                  DD_API_KEY=${DataDogApiKey} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
                  usermod -a -G docker dd-agent
                  cat <<EOF > /etc/datadog-agent/conf.d/docker.d/conf.yaml
                  init_config:
                  instances:
                    - url: "unix://var/run/docker.sock"
                      new_tag_names: true
                  EOF
                  echo "hostname: ${ClusterName}-$(curl http://169.254.169.254/latest/meta-data/instance-id)" >> /etc/datadog-agent/datadog.yaml
                  echo "tags: ${ClusterName}" >> /etc/datadog-agent/datadog.yaml
                  restart datadog-agent
                  fi

                  if [ "${EfsFileSystemId}" != "" ]; then
                  mkdir -p ${EfsMountPoint}
                  chown ec2-user:ec2-user ${EfsMountPoint}
                  echo "${EfsFileSystemId}.efs.${AWS::Region}.amazonaws.com:/ ${EfsMountPoint} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
                  mount -a -t nfs4
                  fi

                  if [ "${DataDogLogging}" = "true" ]; then
                  cat <<EOF >> /etc/datadog-agent/conf.d/docker.d/conf.yaml
                  logs:
                    - type: docker
                      service: docker
                  EOF
                  restart datadog-agent
                  fi
                  cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh
                  #!/bin/bash
                  while sleep 5; do
                    if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)]; then
                      /bin/false
                    else
                      logger "[spot-instance-termination-notice-handler.sh]: spot instance termination notice detected"

                      STATUS=DRAINING
                      ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \")
                      CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \")

                      logger "[spot-instance-termination-notice-handler.sh]: putting instance in state \$STATUS"
                      logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances \$CONTAINER_INSTANCE --status \$STATUS"

                      /usr/local/bin/aws ecs update-container-instances-state \
                        --cluster \$ECS_CLUSTER \
                        --container-instances \$CONTAINER_INSTANCE \
                        --status \$STATUS

                      logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/aws sns publish --topic-arn ${SnsTopic} --message \"Spot instance termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.  Putting instance in state \$STATUS.\""

                      /usr/local/bin/aws sns publish \
                        --message "Spot instance termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE. Putting instance in state \$STATUS." \
                        --topic-arn ${SnsTopic}

                      logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."
                      sleep 120
                    fi
                  done
                  EOF

                  chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh

  SpotFleetRole:
    Type: AWS::IAM::Role
    Condition: IAMSpot
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "spotfleet.amazonaws.com"
              }
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
      Path: /
