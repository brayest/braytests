AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Services (Web and API)"

Parameters:
  BucketName:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, periods (.), and hyphens (-). It cannot start or
      end with a hyphen (-).
    Default: "BucketName"   
  JWTAuthSecret:
    Type: String
    Description: A hash used for auth between services.  This should be letters and numbers (no special characters), and 25-35 characters long.
  FileBucket:
    Type: String
    Description: Bucket for Files
    Default: NONE
  Environment:
    Type: String
    Default: "development"
  Certificate:
    Type: String
  Cluster:
    Description: ECS Cluster
    Type: String
  ClusterType:
    Description: ECS Cluster Type to launch services
    Type: String
    AllowedValues:
      - EC2(OnDemand)
      - EC2(Spot)
      - Fargate
  ContainerPort:
    Default: 8080
    Type: Number
  Path:
    Type: String
    Default: /
  LoadBalancerArn:
    Type: String
  VpcId:
    Type: String
  PrivateDomain:
    Type: String
    Default: "tetrascience.internal"
  PublicDomain:
    Type: String
    Default: "tetrascience.com"
  SubnetIds:
    Type: CommaDelimitedList
  SecurityGroup:
    Type: String
  EgnyteClientId:
    Type: String
  CreateLogGroup:
    Type: String
    Default: false
  TargetGroupName:
    Type: String

Conditions:
  IsFargate: !Equals [ !Ref ClusterType, Fargate ]

Resources:
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup

  APIELBRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Sub api.${PublicDomain}
      ListenerArn: !Ref ELBListener
      Priority: 1

  AuthELBRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AuthTargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !Sub auth.${PublicDomain}
      ListenerArn: !Ref ELBListener
      Priority: 2

  AuthTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: !If
        - IsFargate
        - ip
        - instance
      VpcId: !Ref VpcId
      Port: !Ref ContainerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      Name: !Sub auth-${TargetGroupName}
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: !If
        - IsFargate
        - ip
        - instance
      VpcId: !Ref VpcId
      Port: !Ref ContainerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      Name: !Sub web-${TargetGroupName}
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: !If
        - IsFargate
        - ip
        - instance
      VpcId: !Ref VpcId
      Port: !Ref ContainerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      Name: !Sub api-${TargetGroupName}
      HealthCheckPath: "/status"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  WebTaskDefinition:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${BucketName}/task-definitions/ts-service-web.cfyml
      TimeoutInMinutes: '60'
      Parameters:
        Environment: !Ref Environment
        ServiceName: "ts-service-web"
        ClusterType: !Ref ClusterType
        JWTAuthSecret: !Ref JWTAuthSecret
        ContainerPort: 8080
        CreateLogGroup: !Ref CreateLogGroup
        InternalDomain: !Ref PrivateDomain
        ExternalDomain: !Ref PublicDomain
        EgnyteClientId: !Ref EgnyteClientId
        FileBucket: !Ref FileBucket

  WebService:
    Type: AWS::ECS::Service
    DependsOn: ELBListener
    Properties:
      ServiceName: "ts-service-web"
      Cluster: !Ref Cluster
      LaunchType: !If
        - IsFargate
        - FARGATE
        - !Ref AWS::NoValue
      NetworkConfiguration:
        !If
          - IsFargate
          - AwsvpcConfiguration:
              AssignPublicIp: ENABLED
              SecurityGroups:
                - !Ref SecurityGroup
              Subnets: !Ref SubnetIds
          - !Ref AWS::NoValue
      DesiredCount: 1
      Role: !If
        - IsFargate
        - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
        - !Ref AWS::NoValue
      TaskDefinition: !GetAtt WebTaskDefinition.Outputs.TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      LoadBalancers:
        - ContainerName: "ts-service-web"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref WebTargetGroup

  AuthTaskDefinition:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${BucketName}/task-definitions/ts-service-auth.cfyml
      TimeoutInMinutes: '60'
      Parameters:
        Environment: !Ref Environment
        ServiceName: "ts-service-auth"
        ClusterType: !Ref ClusterType
        JWTAuthSecret: !Ref JWTAuthSecret
        ContainerPort: 8080
        CreateLogGroup: !Ref CreateLogGroup
        InternalDomain: !Ref PrivateDomain
        ExternalDomain: !Ref PublicDomain
        FileBucket: !Ref FileBucket

  AuthService:
    Type: AWS::ECS::Service
    DependsOn: ELBListener
    Properties:
      ServiceName: "ts-service-auth"
      Cluster: !Ref Cluster
      LaunchType: !If
        - IsFargate
        - FARGATE
        - !Ref AWS::NoValue
      NetworkConfiguration:
        !If
          - IsFargate
          - AwsvpcConfiguration:
              AssignPublicIp: ENABLED
              SecurityGroups:
                - !Ref SecurityGroup
              Subnets: !Ref SubnetIds
          - !Ref AWS::NoValue
      DesiredCount: 1
      Role: !If
        - IsFargate
        - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
        - !Ref AWS::NoValue
      TaskDefinition: !GetAtt AuthTaskDefinition.Outputs.TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      LoadBalancers:
        - ContainerName: "ts-service-auth"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref AuthTargetGroup

  APITaskDefinition:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${BucketName}/task-definitions/ts-gateway-api.cfyml
      TimeoutInMinutes: '60'
      Parameters:
        Environment: !Ref Environment
        ServiceName: "ts-gateway-api"
        ClusterType: !Ref ClusterType
        JWTAuthSecret: !Ref JWTAuthSecret
        ContainerPort: 8080
        CreateLogGroup: !Ref CreateLogGroup
        InternalDomain: !Ref PrivateDomain
        ExternalDomain: !Ref PublicDomain
        FileBucket: !Ref FileBucket

  APIService:
    Type: AWS::ECS::Service
    DependsOn: APIELBRule
    Properties:
      ServiceName: "ts-gateway-api"
      Cluster: !Ref Cluster
      LaunchType: !If
        - IsFargate
        - FARGATE
        - !Ref AWS::NoValue
      NetworkConfiguration:
        !If
          - IsFargate
          - AwsvpcConfiguration:
              AssignPublicIp: ENABLED
              SecurityGroups:
                - !Ref SecurityGroup
              Subnets: !Ref SubnetIds
          - !Ref AWS::NoValue
      DesiredCount: 1
      Role: !If
        - IsFargate
        - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
        - !Ref AWS::NoValue
      TaskDefinition: !GetAtt APITaskDefinition.Outputs.TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      LoadBalancers:
        - ContainerName: "ts-gateway-api"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref APITargetGroup
