AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Environment:
    Type: String
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicDomain:
    Type: String
    Default: "tetrascience.com"
  PublicDomainZoneId:
    Type: String
    Default: ""
  PrivateDomain:
    Type: String
    Default: "tetrascience.internal"
  ELBName:
    Type: String
  ElasticsearchDNS:
    Type: String
  RabbitmqDNS:
    Type: String
  ELKDNS:
    Type: String
  RedisDNS:
    Type: String
  PostgresDNS:
    Type: String
  Web:
    Type: String

Conditions:
  IsWeb: !Equals [ !Ref Web, true ]

Outputs:
  PublicLBArn:
    Value: !If
      - IsWeb
      - !Ref PublicLoadBalancer
      - ""
  PrivateLBArn:
    Value: !Ref PrivateLoadBalancer
  PrivateDNS:
    Value: !Ref PrivateDNS
  PrivateListenerArn:
    Value: !Ref PrivateELBDefaultListener

Resources:
  PublicDNSAPIRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsWeb
    Properties:
      HostedZoneId: !Ref PublicDomainZoneId
      Comment: API Public DNS
      Name: !Sub "api.${PublicDomain}."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt PublicLoadBalancer.DNSName
  PublicDNSWebRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsWeb
    Properties:
      HostedZoneId: !Ref PublicDomainZoneId
      Comment: Web Public DNS
      Name: !Sub "${PublicDomain}."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt PublicLoadBalancer.DNSName
  PrivateDNS:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Internal Hosted Zone for Testing"
      Name: !Ref PrivateDomain
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref "AWS::Region"

  PrivateDNSWildcardRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'PrivateDNS'
      Comment: Wilcard DNS for internal resolution
      Name: !Sub "*.${PrivateDomain}."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt PrivateLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt PrivateLoadBalancer.DNSName

  PrivateDNSRedisRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'PrivateDNS'
      Comment: Redis Internal DNS
      Name: !Sub "redis.${PrivateDomain}."
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Ref RedisDNS

  PrivateDNSRDSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'PrivateDNS'
      Comment: Postgres Internal DNS
      Name: !Sub "postgres.${PrivateDomain}."
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Ref PostgresDNS

  PrivateDNSESRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'PrivateDNS'
      Comment: ES Internal DNS
      Name: !Sub "elasticsearch.${PrivateDomain}."
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref ElasticsearchDNS

  PrivateDNSRMQRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'PrivateDNS'
      Comment: Rabbitmq Internal
      Name: !Sub "rabbitmq.${PrivateDomain}."
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref RabbitmqDNS

  PrivateDNSELKRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'PrivateDNS'
      Comment: Rabbitmq Internal
      Name: !Sub "elk.${PrivateDomain}."
      Type: A
      TTL: 300
      ResourceRecords:
        - !Ref ELKDNS

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: IsWeb
    Properties:
      Name: !Sub ${ELBName}-Public
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ELBName}-Private
      Scheme: internal
      Subnets: !Ref PrivateSubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  PrivateELBDefaultListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PrivateDefaultTargetGroup

  PrivateDefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      HealthCheckPath: "/status"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: "elb-allow-web"
